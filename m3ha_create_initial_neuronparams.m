function [neuronParamsTables, neuronParamsFiles, ...
                neuronParamsTableDefault, passiveParamsFile] = ...
                m3ha_create_initial_neuronparams (varargin)
%% Creates initial NEURON parameters for each cell
% Usage: [neuronParamsTables, neuronParamsFiles, ...
%               neuronParamsTableDefault, passiveParamsFile] = ...
%               m3ha_create_initial_neuronparams (varargin)
% Explanation:
%       TODO
% Example(s):
%       TODO
% Outputs:
%       neuronParamsTables
%                   - NEURON parameters table for each cell
%                   specified as a cell array of tables
%       neuronParamsFiles
%                   - NEURON parameters file for each cell
%                   specified as a cell array of character arrays
% TODO
% Arguments:
%       varargin    - 'PassiveFileName': the name of passive parameters file
%                   must be a string scalar or a character vector
%                   default == /media/adamX/m3ha/data_dclamp/take4/
%                               dclampPassiveParams_byCells_tofit.xlsx
%                   - 'OutFolder': directory to place NEURON parameters files
%                   must be a string scalar or a character vector
%                   default == fullfile(pwd, 'initial_params')
%                   
%
% Requires:
%       cd/argfun.m
%       cd/check_dir.m
%       cd/compute_gpas.m
%       cd/compute_surface_area.m
%       cd/construct_fullpath.m
%       cd/copyvars.m
%       cd/force_column_numeric.m
%       cd/save_params.m
%       cd/update_param_values.m
%
% Used by:    
%       ~/mh3a/optimizer4gabab/singleneuronfitting42.m and beyond

% File History:
% 2018-10-31 Created by Adam Lu
% 2018-12-11 Added the 'InitValue' column
% 2018-12-11 Made binary arrays logical arrays
% 

%% Hard-coded parameters
initialParamsFolderName = 'initial_params';

% Must be consistent with find_passive_params.m
% Default parameter values (most from Destexhe & Neubig 1997)
cmInit = 0.88;          % specific membrane capacitance [uF/cm^2]
RaInit = 173;           % axial resistivity [Ohm-cm]
corrDInit = 1;          % dendritic surface area correction factor
% corrDInit = 7.954;    % dendritic surface area correction factor
                        %   default value was estimated by fitting 
                        %   voltage-clamp traces in Destexhe et al 1998a

% Column names for the parameters table
columnNames = {'Value', 'InitValue', 'LowerBound', 'UpperBound', 'Class', ...
                'IsLog', 'IsPassive', 'UseAcrossTrials', 'UseAcrossCells'};

% Initial parameter values
% TODO: Replace this by input parser
neuronParamsDefault = [ ...
    38.42, 84.67, 8.50, ...
    cmInit, RaInit, corrDInit, 2e-5, -70, ...
    .2e-3, .2e-3, .2e-3, ...
    1, 1, 1, 1, ...
    1.0e-8, 1.0e-8, 1.0e-8, -28, 0, ...
    2.0e-5, 2.0e-5, 2.0e-5, ...
    5.5e-3, 5.5e-3, 5.5e-3, ...
    5.5e-6, 5.5e-6, 5.5e-6, ...
    ];

    % cmInit, RaInit, corrDInit, 1e-5, -80, ...

% Names for each parameter
neuronParamNames = { ...
    'diamSoma', 'LDend', 'diamDend', ...
    'cm', 'Ra', 'corrD', 'gpas', 'epas', ...
    'pcabarITSoma', 'pcabarITDend1', 'pcabarITDend2', ...
    'shiftmIT', 'shifthIT', 'slopemIT', 'slopehIT', ...
    'ghbarIhSoma', 'ghbarIhDend1', 'ghbarIhDend2', 'ehIh', 'shiftmIh', ...
    'gkbarIKirSoma', 'gkbarIKirDend1', 'gkbarIKirDend2', ...
    'gkbarIASoma', 'gkbarIADend1', 'gkbarIADend2', ...
    'gnabarINaPSoma', 'gnabarINaPDend1', 'gnabarINaPDend2', ...
    };

% Lower bounds for each parameter
neuronParamsLowerBound = [ ...
    8, 5, 3, ...
    cmInit, RaInit, corrDInit, 1.0e-8, -95, ...
    1.0e-8, 1.0e-8, 1.0e-8, ...
    -30, -30, 0.1, 0.1, ...
    1.0e-8, 1.0e-8, 1.0e-8, -32, -30, ...
    1.0e-8, 1.0e-8, 1.0e-8, ...
    1.0e-8, 1.0e-8, 1.0e-8, ...
    1.0e-8, 1.0e-8, 1.0e-8, ...
    ];

% Upper bounds for each parameter
neuronParamsUpperBound = [ ...
    250, 150, 30, ...
    cmInit, RaInit, corrDInit, 1.0, -45, ...
    1.0e-2, 1.0e-2, 1.0e-2, ...
    30, 30, 10, 10, ...
    1.0e-2, 1.0e-2, 1.0e-2, -24, 30, ...
    1.0e-2, 1.0e-2, 1.0e-2, ...
    1.0e-2, 1.0e-2, 1.0e-2, ...
    1.0e-2, 1.0e-2, 1.0e-2, ...
    ];

% Parameter class for each parameter
neuronParamsClass = [ ...
    1, 1, 1, ...
    2, 2, 2, 3, 3, ...
    4, 4, 4, ...
    4, 4, 4, 4, ...
    5, 5, 5, 5, 5, ...
    6, 6, 6, ...
    7, 7, 7, ...
    8, 8, 8, ...
    ];

% Whether each parameter will be varied log-scaled
neuronParamsIsLog = logical([ ...
    0, 0, 0, ...
    1, 1, 0, 1, 0, ...
    1, 1, 1, ...
    0, 0, 1, 1, ...
    1, 1, 1, 0, 0, ...
    1, 1, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    ]);

% Whether the parameter is considered a 'passive' parameter
%   Note: must be consistent with TC3.tem
neuronParamsIsPassive = logical([ ...
    1, 1, 1, ...
    1, 1, 1, 1, 1, ...
    0, 0, 0, ...
    0, 0, 0, 0, ...
    1, 1, 1, 0, 1, ...
    0, 0, 0, ...
    0, 0, 0, ...
    0, 0, 0, ...
    ]);

% Whether the parameter is varied when fitting across trials for each cell
neuronParamsUseAcrossTrials = logical([ ...
    1, 1, 1, ...
    0, 0, 0, 1, 0, ...
    1, 1, 1, ...
    0, 0, 0, 0, ...
    1, 1, 1, 0, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    ]);

% Whether the parameter varied when fitting across cells
neuronParamsUseAcrossCells = logical([ ...
    0, 0, 0, ...
    0, 0, 0, 0, 0, ...
    0, 0, 0, ...
    1, 1, 1, 1, ...
    0, 0, 0, 1, 0, ...
    0, 0, 0, ...
    0, 0, 0, ...
    0, 0, 0, ...
    ]);

%% Default values for optional arguments
passiveFileNameDefault = ['/media/adamX/m3ha/data_dclamp/take4/', ...
                            'dclampPassiveParams_byCells_tofit.xlsx'];
                            % default passive parameters file name
outFolderDefault = '';      % set later

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Deal with arguments
% Set up Input Parser Scheme
iP = inputParser;
iP.FunctionName = mfilename;

% Add parameter-value pairs to the Input Parser
addParameter(iP, 'PassiveFileName', passiveFileNameDefault, ...
    @(x) validateattributes(x, {'char', 'string'}, {'scalartext'}));
                                                % introduced after R2016b
addParameter(iP, 'OutFolder', outFolderDefault, ...
    @(x) validateattributes(x, {'char', 'string'}, {'scalartext'}));    

% Read from the Input Parser
parse(iP, varargin{:});
passiveFileName = iP.Results.PassiveFileName;
outFolder = iP.Results.OutFolder;

%% Preparation
% Set default output folder
if isempty(outFolder)
    outFolder = fullfile(pwd, initialParamsFolderName);
end

% Check if the output folder exists
check_dir(outFolder);

% Generate the default NEURON parameters from arguments
% TODO: Replace by parsed inputs

% Force as column vectors
[neuronParamsValue, neuronParamsLowerBound, ...
    neuronParamsUpperBound, neuronParamsClass, ...
    neuronParamsIsLog, neuronParamsIsPassive, ...
    neuronParamsUseAcrossTrials, neuronParamsUseAcrossCells] = ...
    argfun(@force_column_numeric, ...
            neuronParamsDefault, neuronParamsLowerBound, ...
            neuronParamsUpperBound, neuronParamsClass, ...
            neuronParamsIsLog, neuronParamsIsPassive, ...
            neuronParamsUseAcrossTrials, neuronParamsUseAcrossCells);
            
% Create the default neuronParamsTable
neuronParamsTableDefault = ...
    table(neuronParamsValue, neuronParamsValue, neuronParamsLowerBound, ...
            neuronParamsUpperBound, neuronParamsClass, ...
            neuronParamsIsLog, neuronParamsIsPassive, ...
            neuronParamsUseAcrossTrials, neuronParamsUseAcrossCells, ...
            'RowNames', neuronParamNames, 'VariableNames', columnNames);

%% Do the job
% Print message
fprintf('Creating initial set of NEURON parameters for all cells ... \n');

% Read in the passive parameters table
passiveTable = readtable(passiveFileName);

% Count the number of cells
nCells = width(passiveTable);

% Extract the cell names
cellNameAllCells = passiveTable.cellName;

% Extract the passive parameters needed
%   cf. m3ha_create_single_neuron_commands.m
radiusSomaAllCells = passiveTable.radiusSoma;
diamDendAllCells = passiveTable.diameterDendrite;
LDendAllCells = passiveTable.lengthDendrite;
epasAllCells = passiveTable.epasEstimate;
RinAllCells = passiveTable.Rinput;
% RinAllCells = passiveTable.RinEstimate;

% Compute the diameter of the somas
diamSomaAllCells = 2 * radiusSomaAllCells;

% Force as column vectors
[diamSomaAllCells, LDendAllCells, diamDendAllCells] = ...
    argfun(@force_column_numeric, diamSomaAllCells, ...
            LDendAllCells, diamDendAllCells);

% Compute the surface area for each cell
areaAllCells = compute_surface_area([diamSomaAllCells, LDendAllCells], ...
                                    [diamSomaAllCells, diamDendAllCells]);

% Estimate the passive conductances from the input resistances
gpasAllCells = compute_gpas(RinAllCells, areaAllCells);

% Create initial parameter tables by updating the default table
neuronParamsTables = ...
    arrayfun(@(x, y, z, w, v) update_param_values(neuronParamsTableDefault, ...
            'diamSoma', x, 'LDend', y, 'diamDend', z, 'epas', w, 'gpas', v), ...
            diamSomaAllCells, LDendAllCells, diamDendAllCells, ...
            epasAllCells, gpasAllCells, 'UniformOutput', false);

% Update the initValue column as well
valueStr = columnNames{1};
initValueStr = columnNames{2};
neuronParamsTables = ...
    cellfun(@(x) copyvars(x, valueStr, initValueStr), ...
            neuronParamsTables, 'UniformOutput', false);

% Construct parameter file names
paramsFileNames = cellfun(@(x) ['initial_params_', x, '.csv'], ...
                            cellNameAllCells, 'UniformOutput', false);

% Construct full paths
paramsFilePaths = construct_fullpath(paramsFileNames, 'Directory', outFolder);

% Save as parameter files
neuronParamsFiles = cellfun(@(x, y) save_params(x, 'FileName', y), ...
                            neuronParamsTables, paramsFilePaths, ...
                            'UniformOutput', false);

%% Deal with outputs
% Save the passive parameters file name
passiveParamsFile = passiveFileName;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%{
OLD CODE:

% Count the number of NEURON parameters
nParams = numel(neuronParamNames);

%   Note: the variable names used here are the variable names in the table

neuronParamsDefault = [ ...
    38.42, 84.67, 8.50, ...
    cmInit, RaInit, corrDInit, 2e-5, -70, ...
    .2e-3, .2e-3, .2e-3, ...
    1, 1, 1, 1, ...
    2.2e-5, 2.2e-5, 2.2e-5, -28, 0, ...
    2.0e-5, 2.0e-5, 2.0e-5, ...
    5.5e-3, 5.5e-3, 5.5e-3, ...
    5.5e-6, 5.5e-6, 5.5e-6, ...
    ];

columnNames = {'Value', 'LowerBound', 'UpperBound', 'Class', ...
                'IsLog', 'IsPassive', 'UseAcrossTrials', 'UseAcrossCells'};

neuronParamsTableDefault = ...
    table(neuronParamsValue, neuronParamsLowerBound, ...
            neuronParamsUpperBound, neuronParamsClass, ...
            neuronParamsIsLog, neuronParamsIsPassive, ...
            neuronParamsUseAcrossTrials, neuronParamsUseAcrossCells, ...
            'RowNames', neuronParamNames, 'VariableNames', columnNames);

singleneuronfitting42 & 43
neuronParamsUseAcrossTrials = logical([ ...
    0, 0, 0, ...
    0, 0, 0, 1, 0, ...
    1, 1, 1, ...
    0, 0, 0, 0, ...
    1, 1, 1, 0, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    ]);

neuronParamsIsPassive = logical([ ...
    1, 1, 1, ...
    1, 1, 1, 1, 1, ...
    0, 0, 0, ...
    0, 0, 0, 0, ...
    0, 0, 0, 0, 1, ...
    0, 0, 0, ...
    0, 0, 0, ...
    0, 0, 0, ...
    ]);

singleneuronfitting44
% Whether the parameter is varied when fitting across trials for each cell
neuronParamsUseAcrossTrials = logical([ ...
    1, 1, 1, ...
    0, 0, 0, 1, 0, ...
    1, 1, 1, ...
    0, 0, 0, 0, ...
    1, 1, 1, 0, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    1, 1, 1, ...
    ]);

%}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%